# Continuous Audio-Morphing Explorer – Product Requirements Document (PRD)
# -----------------------------------------------------------------------
# Location: acorex/.taskmaster/templates/PRD.txt
# Version: 0.1
# Date: 2025-06-11

## 1. Background / Motivation
Acorex currently supports probabilistic jump-based morphing using FluCoMa's `AudioTransport` in a two-file, toggle-driven mode. While effective, the audible result is still discontinuous because audio only changes at discrete jump points. Users want a *truly continuous* navigation experience inside the 3-D Explorer space.

## 2. Objective
Transform corpus exploration into a continuous, frame-accurate morphing system by:
• Pre-computing STFT frames during corpus analysis (UMAP step)  
• Augmenting each frame with analysis data required by `AudioTransport`  
• Modifying `AudioTransport` to perform **N-way barycentric blending** (instead of pairwise)  
• Streaming the morphed audio of the frame(s) directly under the playhead as it moves through 3-D space.

## 3. Key Features
1. **Transport Analysis Flag**  
   New dataset option `analysisSettings.bTransport` ("Analyze Transport Matrices"). When enabled and `bTime` is true, the analysis pipeline:
   • Computes STFT frames (window = `morphSTFTSize`) for *all* timepoints.  
   • Stores magnitude, phase, & derivative (dH) data needed by `AudioTransport`.

2. **Batch Pre-computation During UMAP**  
   While building the low-dimensional embedding (UMAP/PCA/t-SNE), the STFT analyses above are executed so no additional pass is required.

3. **Frame Cache & Streaming**  
   An LRU cache (configurable) stores recent frames.  Cache miss => on-demand STFT compute + store.

4. **Morph Engine**  
   New real-time component that:
   • Queries KD-tree for the *k* nearest frames to current playhead position.  
   • Converts distances → barycentric weights.  
   • Pulls frames from cache.  
   • Calls the modified `AudioTransport::processFrameN` (new) for N-way blend.  
   • Overlap-adds output into the sound buffer.

5. **UI / Explorer Updates**  
   • If `bTransport` + `bTime` are enabled, Explorer shows a free locator (no discrete triggers).  
   • Provide a toggle/button: "Continuous Morph Mode".

## 4. Functional Requirements
FR-1  Corpus analysis SHALL compute and persist STFT frame data when `bTransport` is true.  
FR-2  `AudioTransport` SHALL support at least 3-way barycentric interpolation (extendable to N).  
FR-3  Playback engine SHALL continuously output audio reflecting the playhead's XYZ location with ≤ 10 ms latency.  
FR-4  Cache SHALL prevent audible drop-outs on corpora up to 30 min total audio (≈80 k frames).  
FR-5  UI SHALL allow enabling/disabling continuous morph mode and display current morph weight breakdown.

## 5. Non-Functional Requirements
NFR-1  Real-time CPU usage < 35 % of a single core on a 2020 MacBook Pro (Intel i7, 44.1 kHz, 512-sample buffer).  
NFR-2  Peak RAM < 1 GB for corpora ≤ 100 k frames.  
NFR-3  No additional audible latency beyond existing buffering.  
NFR-4  Graceful degradation: if cache misses occur, engine outputs silence instead of glitching.

## 6. Technical Notes
• **N-way barycentric blending**: implement `AudioTransport::processFrameN(RealVectorView frames[N], double weights[N], RealMatrixView out)` or similar.  
• **KD-tree**: reuse `PointPicker` but return *k* IDs + distances each call.  
• **Cache**: encapsulate in `TransportFrameCache` (thread-safe).  
• **Data layout**: `DatasetTransport.frames[file][time] -> struct { mag, phase, dH }`.

## 7. Road-map / Task Breakdown (suggested for Taskmaster)
1. **Add Config Flag** – Add `bTransport` to `Utils::AnalysisSettings` & UI toggle.  
2. **STFT Frame Struct + Serialization** – Define `TransportFrame` and extend dataset save/load.  
3. **Batch Analysis Pipeline** – Integrate STFT calc inside existing UMAP pass.  
4. **LRU Cache Module** – Implement generic thread-safe LRU for frames.  
5. **Modify AudioTransport** – Introduce N-way barycentric algorithm (`processFrameN`).  
6. **Morph Engine** – New class in `Explorer/AudioMorphEngine.cpp` handling real-time blending & overlap-add.  
7. **Refactor AudioPlayback** – Remove jump logic and delegate to MorphEngine.  
8. **KD-tree k-Nearest Extension** – Update `PointPicker::FindNearestToPosition` to return k neighbours + weights.  
9. **UI Changes** – Explorer: locator widget + transport toggle + weight HUD.  
10. **Performance Optimisation** – SIMD where possible; tune cache size; background pre-fetch around cursor.  
11. **Testing & QA** – Unit tests for N-way interpolation accuracy; integration tests for continuous playback.  
12. **Docs & Examples** – Update README, write user guide on continuous morphing.

---
End of PRD 